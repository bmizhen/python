MORSE_CODE = \
    {'.-': 'A', '-...': 'B', '-.-.': 'C', '-..': 'D', '.': 'E', '..-.': 'F', '--.': 'G', '....': 'H',
     '..': 'I',
     '.---': 'J', '-.-': 'K', '.-..': 'L', '--': 'M', '-.': 'N', '---': 'O', '.--.': 'P',
     '--.-': 'Q', '.-.': 'R',
     '...': 'S', '-': 'T', '..-': 'U', '...-': 'V', '.--': 'W', '-..-': 'X', '-.--': 'Y',
     '--..': 'Z',
     '-----': '0', '.----': '1', '..---': '2', '...--': '3', '....-': '4', '.....': '5',
     '-....': '6',
     '--...': '7', '---..': '8', '----.': '9', '.-.-.-': '.', '--..--': ',', '..--..': '?',
     '.----.': "'",
     '-.-.--': '!', '-..-.': '/', '-.--.': '(', '-.--.-': ')', '.-...': '&', '---...': ':',
     '-.-.-.': ';',
     '-...-': '=', '.-.-.': '+', '-....-': '-', '..--.-': '_', '.-..-.': '"', '...-..-': '$',
     '.--.-.': '@',
     '...---...': 'SOS'}


def split(k, l):
    if k > len(l):
        return l
    chunk = len(l) // k
    if k * chunk < len(l):
        chunk += 1
    return [l[i: i + chunk] for i in range(0, len(l), chunk)]


def average_w(l):
    if len(l) == 0:
        return 0
    return sum(len(w) for w in l) / len(l)


def closest_index(centers, w):
    result = min([(i, (c - len(w)) ** 2) for i, c in enumerate(centers)], key=lambda x: x[1])[0]
    # print(centers, w, result)
    return result


def kluster(k, words):
    if k == 0:
        return words
    if len(words) < k:
        return [] + kluster(k - 1, words)
    # words = sorted(words)
    groups = split(k, words)
    #
    #
    for i in range(len(words)):
        centers = [average_w(g) for g in groups]
        # print(centers)
        # print(groups)
        new_groups = [[] for _ in groups]
        for g in groups:
            for w in g:
                new_groups[closest_index(centers, w)].append(w)
        # print(new_groups)
        #
        if new_groups == groups:
            return new_groups
        groups = new_groups
    return groups


def split_m(bits):
    from itertools import groupby
    return [''.join(g) for k, g in groupby('0' + bits + '0')][1:-1]


def closer_left(left, right, num):
    return abs(left - num) <= abs(right - num)


def to_morse(average_dot, average_dash, sample):
    if sample.startswith('1'):
        if closer_left(average_dot, average_dash, len(sample)):
            return '.'
        else:
            return '-'
    else:
        if len(sample) > average_dash * 1.5:  # average_dot * 4.3:
            return ' '
        else:
            if closer_left(average_dot, average_dash, len(sample)):
                return ''
            else:
                return '_'


def decodeBitsAdvanced(bits):
    grouped = split_m(bits)
    # print(grouped)

    ones = list(g for g in grouped if g.startswith('1'))
    if not ones:
        return ''

    zeros = list(g for g in grouped if g.startswith('0'))

    if not zeros:
        return '.'

    ones_samples = sorted(kluster(2, list(set(ones))), key=lambda l: average_w(l))
    zero_samples = sorted(kluster(3, list(set(zeros))), key=lambda l: average_w(l))

    while len(ones_samples) < 2:
        ones_samples.append([])

    while len(zero_samples) < 3:
        zero_samples.append([])

    dots, dashes = ones_samples
    ztick, zchar, zword = zero_samples

    average_dot = average_w(dots)
    average_dash = average_w(dashes)

    print(dots, dashes)
    print(ztick, zchar, zword)
    print(average_dot, average_dash)

    if len(zeros) == 1:
        gap = len(zeros[0])
        if gap < average_dot:
            average_dash = average_dot
            average_dot = gap
        else:
            # average_dot = gap
            pass

    regular_morse = [c for c in [to_morse(average_dot, average_dash, g) for g in grouped] if c != '']
    return ''.join(regular_morse)


def decodeMorse(morse_code):
    if not morse_code:
        return ''

    # print(morse_code)

    def w_to_m(w):
        print(w)
        try:
            return ''.join([MORSE_CODE[m] for m in w.split('_')])
        except Exception as e:
            print(e)
            return ''

    message = ' '.join(w_to_m(w) for w in morse_code.split(' '))
    print(message)
    return message


print("HAHA", decodeMorse(decodeBitsAdvanced(
    '00000000000000011111111000000011111111111100000000000111111111'
    '00000111111111010000000011111111111101100001111111101111111111100'
    '00000000000000000111111111100001100011111111111110001110000000000'
    '01111111111110000111111111100001100111111111110000000000111111111'
    '11101110000111000000000000000000111111111101011111111011000000000'
    '00000011111111111000011111111111100001000011111111111111000000000'
    '001111111110000000110000001110000000000000000000000000000111100'
    '0111110000011110000000011111111110011111111110011111111111110000'
    '0000011110011111011111110000000000000000000000111111111110000000'
    '0111110000000111110000000011111111111100000000011111000111111110'
    '0000000011111111111000001100000000011111000000011100000000001111'
    '11111111110001110011111111110011111100000000000000000000011110001'
    '111111111000011111111111111001000000000011111111001111111101111111'
    '100000000111011111110001110000000010011111110000000011111111110000'
    '000001111000011111110000000000000111111111001111111101111111111000'
    '000000001111111100000011000000000000000000001111111010100000100000'
    '011111111000000000111110001111111110000001111111111100111111110011'
    '1111111000000001100011111111000011101111111111110000111110000111111'
    '1100000000000011110011101110001000111111110000000001111000011111110'
    '0101100011111111110000000000000000001111111111100000001000000000000'
    '00000011110111110000001000011101110000000000011111111100000011111111'
    '11110011111111111100011111111100000111111110000000000000111011111111'
    '11110000001100111111111111011100011111111111000000001111000001111000'
    '00111111111100000111111111111000000011111111000000000001000000111100'
    '000001000001111100111111111110000000000000000000010001111111100000011'
    '111111100000000000000100001111111111110111001111111111100000111111100'
    '0011111111110000000000000000000000000111000001111111111110111100000000'
    '1000000001111111110001111111111110000111000011111111111110000000000000'
    '0111110000011111001111111100000000000011100011100000000000011111000001'
    '1111111111010000000011100000000000000000000000000001111100100000000001'
    '11111111000011111111110000000000111111111111101111111111100000000010000'
    '00000000001111111110010000110000000000000011110011110000000000110000000'
    '11111111111100000000111111111110000000001111000000000000000000001111011'
    '11111111111000000000001111000011111000011110000000001100111111100111000'
    '000000100111000000000000111110000010000011111000000000000001111111111100'
    '000000110111111111100000000000000111111111111100000111000000000111111110'
    '001111000000111111110111111000000001111000000000010000111111111000011110'
    '00111111111011111000011111111111100000000000000000000000011111111111000'
    '00001110111111111000111111100000000011111111100000111111111001111111100'
    '00000001111111111100111111111110000000000110000000000000000001000011111'
    '11111000000000111111111000000000000000000000001111111111111100000011111'
    '11110000011111111100000000001111111100000100000000111111110000111110011'
    '11111100000001110000000011110000000001011111111000011111011111111110011'
    '01111111111100000000000000000010001111111111110111111110000000000000000'
    '11000000000000000000111100101111100000000111111111000000000011111000111'
    '11111111101100000000111110000011110000111111111111000000001111111111100'
    '00111011111111111011100000000001111111110111110001111111111000000000000'
    '00000000000000100001111111111000000000011111111101111100000000000000000'
    '00000110000011110000000000001111111111100110001111111100000011100000000'
    '00011111000000001111111111000001111100000111100011000000001110000000000'
    '000011110000111111111110000011100000000111111111100000011111111110011000'
    '00000011110000011111111000111000011111111100000100111111111100000000000'
    '00000000111100000011111000001111000000000111111001110000000011111111000'
    '100000000000011111111000011001111111100000000000110111000000000000111111'
    '11111100010000000011111111111000000111111111101110000000000000000000000'
    '0000')))

print(decodeMorse(decodeBitsAdvanced(
    '0000000011011010011100000110000001111110100111110011111100000000000111'
    '011111111011111011111000000101100011111100000111110011101100000100000')),
    'HEY JUDE')

print(decodeMorse(decodeBitsAdvanced(
    '1110111')))
